import {StyleSheet, Text, Alert, TouchableOpacity, View} from 'react-native';
import React, {useEffect} from 'react';
import PushNotification from 'react-native-push-notification';
import firebase from '@react-native-firebase/app';
import messaging from '@react-native-firebase/messaging';

const App = () => {
  const channel = () => {
    PushNotification.createChannel({
      channelId: '123', // (required)
      channelName: 'Notif Channel', // (required)
      channelDescription: 'A channel to categorise your notifications', // (optional) default: undefined.
    });
  };

  const click = () => {
    PushNotification.localNotification({
      channelId: '123', // (required) channelId, if the channel doesn't exist, notification will not trigger.
      id: 123, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
      title: 'My Notification Title', // (optional)
      message: 'My Notification Message', // (required)
    });
  };
  const cekToken = async () => {
    const token = await messaging().getToken();

    if (token) {
      console.log(token);
    }
  };

  async function requestUserPermission() {
    const authStatus = await messaging().requestPermission();
    const enabled =
      authStatus === messaging.AuthorizationStatus.AUTHORIZED ||
      authStatus === messaging.AuthorizationStatus.PROVISIONAL;

    if (enabled) {
      console.log('Authorization status:', authStatus);
    }
  }

  const handleBgMsg = async () => {
    messaging().setBackgroundMessageHandler(async remoteMessage => {
      console.log('Message handled in the background!', remoteMessage);
    });
  };

  const config = () => {
    PushNotification.configure({
      // (optional) Called when Token is generated (iOS and Android)
      onRegister: function (token) {
        console.log('TOKEN:', token);
      },
      onNotification: function (notification) {
        console.log('NOTIFICATION:', notification);
        notification.finish(PushNotificationIOS.FetchResult.NoData);
      },
      onAction: function (notification) {
        console.log('ACTION:', notification.action);
        console.log('NOTIFICATION:', notification);
      },
      onRegistrationError: function (err) {
        console.error(err.message, err);
      },
      permissions: {
        alert: true,
        badge: true,
        sound: true,
      },
      popInitialNotification: true,
      requestPermissions: true,
    });
  };

  useEffect(() => {
    // const unsubscribe = messaging().onMessage(async remoteMessage => {
    //   Alert.alert('asdsadsadsa!', JSON.stringify(remoteMessage));
    // });
    // // Unmount FCM if done
    // return unsubscribe;

    config();
  }, []);

  return (
    <View style={{flex: 1, justifyContent: 'center', alignItems: 'center'}}>
      <TouchableOpacity
        onPress={channel}
        style={{
          backgroundColor: 'blue',
          width: 100,
          height: 30,
          justifyContent: 'center',
          alignItems: 'center',
          marginTop: 30,
        }}>
        <Text style={{color: 'white'}}>Channel</Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={click}
        style={{
          backgroundColor: 'blue',
          width: 100,
          height: 30,
          justifyContent: 'center',
          alignItems: 'center',
          marginTop: 30,
        }}>
        <Text style={{color: 'white'}}>Notifikasi</Text>
      </TouchableOpacity>
      <TouchableOpacity
        onPress={cekToken}
        style={{
          backgroundColor: 'blue',
          width: 100,
          height: 30,
          justifyContent: 'center',
          alignItems: 'center',
          marginTop: 30,
        }}>
        <Text style={{color: 'white'}}>Cek Token</Text>
      </TouchableOpacity>
    </View>
  );
};

export default App;

const styles = StyleSheet.create({});
